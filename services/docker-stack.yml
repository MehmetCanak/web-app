version : "3.3"

services:
  portainer:
    image : portainer/portainer
    ports :
        - 9000:9000
    command: -H unix:///var/run/docker.sock
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - '/etc/localtime:/etc/localtime:ro'
  # test:
  #   image: containous/whoami:latest
  #   ports:
  #     - 8888:80
  #   networks:
  #     - frontend-nw
  #   deploy:
  #     mode: replicated
  #     replicas: 2
  db:
    image: mysql:5.6
    ports:
      - "3306:3306"
    environment:
        MYSQL_DATABASE: myDb
        MYSQL_USER: user
        MYSQL_PASSWORD: test
        MYSQL_ROOT_PASSWORD: test
    volumes:
        - /home/mehmet/web-app/mysql/:/var/lib/mysql
    networks:
        - backend-nw
        - db-nw

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
        - 7777:80
    networks:
        - db-nw
    environment:
        MYSQL_USER: user
        MYSQL_PASSWORD: test
        MYSQL_ROOT_PASSWORD: test
  
  # www:
  #   image: amarsingh3d/apache2.4-php7.2
  #   ports:
  #     - "5555:80"
  #   volumes:
  #     - /home/mehmet/web-app/backend:/var/www/html/
  #   networks:
      
  #     - backend-nw
  #     - db-nw


  frontend: 
    image: karapazar/angular-serve:0.19
    volumes:
        - ./frontend:/usr/src/app 
        - '/etc/localtime:/etc/localtime:ro'
    networks:
        - frontend-nw
    deploy:
        mode: replicated
        replicas: 1
        labels:
            traefik.frontend.rule: "PathPrefix:/"
            traefik.port: "4200"
            traefik.enable: "true"
            traefik.backend: "frontend"
            traefik.docker.network: "test_frontend-nw"


  traefik:
    image: traefik:alpine
    command: -c /etc/traefik.toml
    deploy:
        mode: replicated
        replicas: 1
    ports:
        - "8080:8080"
        - "80:80"
        - target: 443
          published: 443 
          mode: host
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./services/traefik/traefik-stack.toml:/etc/traefik.toml
        - ./services/traefik/data/traefik.log:/etc/traefik.log
        - ./services/traefik/data/traefik-access.log:/etc/traefik-access.log
        - ./services/traefik/self.crt:/etc/self.crt
        - ./services/traefik/self.key:/etc/self.key
        - '/etc/localtime:/etc/localtime:ro'
    networks:
        - frontend-nw
        - backend-nw

  
  nginx:
    image: nginx:alpine
    tty: true
    volumes:
        - ./backend:/var/www 
        - ./backend/nginx.conf:/etc/nginx/conf.d/app.conf
        - '/etc/localtime:/etc/localtime:ro'
    deploy:
        mode: replicated
        replicas: 1
        labels:
            traefik.api.frontend.rule: "PathPrefix:/api"
            traefik.logs.frontend.rule: "PathPrefix:/logs"
            traefik.port: "80"
            traefik.enable: "true"
            traefik.backend: "nginx"
            traefik.docker.network: "test_backend-nw"
    networks:
          - backend-nw

#   laravel:
#     image: karapazar/laravel-php-fpm:0.72
#     volumes:
#         - ./backend:/var/www 
#         - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
#         - /var/run/docker.sock:/var/run/docker.sock 
#         - '/etc/localtime:/etc/localtime:ro'
#     environment:
#         SERVICE_NAME: app
#         SERVICE_TAGS: dev
#     deploy:
#         mode: replicated
#         replicas: 1
#     networks:
#         - backend-nw
#         - db-nw
  laravel:
    image: karapazar/laravel-php-fpm:0.66
    volumes:
        - ./backend:/var/www 
        - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
        - /var/run/docker.sock:/var/run/docker.sock 
        - '/etc/localtime:/etc/localtime:ro'
    environment:
        SERVICE_NAME: app
        SERVICE_TAGS: dev
    deploy:
        mode: replicated 
        replicas: 1
    networks:
        - backend-nw
        - db-nw
  test:
    image: containous/whoami:latest
    networks:
        - frontend-nw
    deploy:
        mode: replicated
        replicas: 1
        labels:
            traefik.frontend.rule: "PathPrefixStrip:/test"
            traefik.port: "80"
            traefik.enable: "true"
            traefik.backend: "test"
            traefik.docker.network: "test_frontend-nw"

networks:
    frontend-nw :
    backend-nw:
    db-nw:
